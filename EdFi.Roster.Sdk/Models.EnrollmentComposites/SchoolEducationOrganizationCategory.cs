/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace EdFi.Roster.Sdk.Models.EnrollmentComposites
{
    /// <summary>
    /// SchoolEducationOrganizationCategory
    /// </summary>
    [DataContract(Name = "school_educationOrganizationCategory")]
    public partial class SchoolEducationOrganizationCategory : IEquatable<SchoolEducationOrganizationCategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolEducationOrganizationCategory" /> class.
        /// </summary>
        [JsonConstructor]
        protected SchoolEducationOrganizationCategory() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolEducationOrganizationCategory" /> class.
        /// </summary>
        /// <param name="category">The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state. (required).</param>
        public SchoolEducationOrganizationCategory(string category = default(string))
        {
            // to ensure "category" is required (not null)
            this.Category = category ?? throw new ArgumentNullException("category is a required property for SchoolEducationOrganizationCategory and cannot be null");
        }

        /// <summary>
        /// The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.
        /// </summary>
        /// <value>The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.</value>
        [DataMember(Name = "category", IsRequired = true, EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SchoolEducationOrganizationCategory {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SchoolEducationOrganizationCategory);
        }

        /// <summary>
        /// Returns true if SchoolEducationOrganizationCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of SchoolEducationOrganizationCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchoolEducationOrganizationCategory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Category (string) maxLength
            if(this.Category != null && this.Category.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Category, length must be less than 306.", new [] { "Category" });
            }

            yield break;
        }
    }

}
