/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using EdFi.Roster.Sdk.Client;
using EdFi.Roster.Sdk.Models.EnrollmentComposites;

namespace EdFi.Roster.Sdk.Api.EnrollmentComposites
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISectionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Section&gt;</returns>
        List<Section> GetSections(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Section&gt;</returns>
        ApiResponse<List<Section>> GetSectionsWithHttpInfo(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string));
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Section</returns>
        Section GetSectionsById(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of Section</returns>
        ApiResponse<Section> GetSectionsByIdWithHttpInfo(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Section&gt;</returns>
        List<Section> GetSectionsByLocalEducationAgency(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Section&gt;</returns>
        ApiResponse<List<Section>> GetSectionsByLocalEducationAgencyWithHttpInfo(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId2"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Section&gt;</returns>
        List<Section> GetSectionsBySchool(string schoolId2, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId2"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Section&gt;</returns>
        ApiResponse<List<Section>> GetSectionsBySchoolWithHttpInfo(string schoolId2, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Section&gt;</returns>
        List<Section> GetSectionsByStaff(string staffId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Section&gt;</returns>
        ApiResponse<List<Section>> GetSectionsByStaffWithHttpInfo(string staffId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Section&gt;</returns>
        List<Section> GetSectionsByStudent(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Section&gt;</returns>
        ApiResponse<List<Section>> GetSectionsByStudentWithHttpInfo(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISectionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Section&gt;</returns>
        System.Threading.Tasks.Task<List<Section>> GetSectionsAsync(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Section&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Section>>> GetSectionsWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Section</returns>
        System.Threading.Tasks.Task<Section> GetSectionsByIdAsync(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Section)</returns>
        System.Threading.Tasks.Task<ApiResponse<Section>> GetSectionsByIdWithHttpInfoAsync(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Section&gt;</returns>
        System.Threading.Tasks.Task<List<Section>> GetSectionsByLocalEducationAgencyAsync(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Section&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Section>>> GetSectionsByLocalEducationAgencyWithHttpInfoAsync(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId2"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Section&gt;</returns>
        System.Threading.Tasks.Task<List<Section>> GetSectionsBySchoolAsync(string schoolId2, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId2"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Section&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Section>>> GetSectionsBySchoolWithHttpInfoAsync(string schoolId2, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Section&gt;</returns>
        System.Threading.Tasks.Task<List<Section>> GetSectionsByStaffAsync(string staffId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Section&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Section>>> GetSectionsByStaffWithHttpInfoAsync(string staffId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Section&gt;</returns>
        System.Threading.Tasks.Task<List<Section>> GetSectionsByStudentAsync(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Section&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Section>>> GetSectionsByStudentWithHttpInfoAsync(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISectionsApi : ISectionsApiSync, ISectionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SectionsApi : ISectionsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SectionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SectionsApi(String basePath)
        {
            this.Configuration = Sdk.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SectionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SectionsApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdk.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SectionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SectionsApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Section&gt;</returns>
        public List<Section> GetSections(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string))
        {
            ApiResponse<List<Section>> localVarResponse = GetSectionsWithHttpInfo(offset, limit, fields, q, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Section&gt;</returns>
        public ApiResponse<List<Section>> GetSectionsWithHttpInfo(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (sectionIdentifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sectionIdentifier", sectionIdentifier));
            }
            if (localCourseCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "localCourseCode", localCourseCode));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (schoolYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolYear", schoolYear));
            }
            if (sessionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sessionName", sessionName));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Section>>("/ed-fi/enrollment/Sections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Section&gt;</returns>
        public async System.Threading.Tasks.Task<List<Section>> GetSectionsAsync(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<List<Section>> localVarResponse = await GetSectionsWithHttpInfoAsync(offset, limit, fields, q, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Section&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Section>>> GetSectionsWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (sectionIdentifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sectionIdentifier", sectionIdentifier));
            }
            if (localCourseCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "localCourseCode", localCourseCode));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (schoolYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolYear", schoolYear));
            }
            if (sessionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sessionName", sessionName));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Section>>("/ed-fi/enrollment/Sections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>Section</returns>
        public Section GetSectionsById(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string))
        {
            ApiResponse<Section> localVarResponse = GetSectionsByIdWithHttpInfo(id, ifNoneMatch, fields, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of Section</returns>
        public ApiResponse<Section> GetSectionsByIdWithHttpInfo(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SectionsApi->GetSectionsById");

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Section>("/ed-fi/enrollment/Sections/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSectionsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Section</returns>
        public async System.Threading.Tasks.Task<Section> GetSectionsByIdAsync(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Section> localVarResponse = await GetSectionsByIdWithHttpInfoAsync(id, ifNoneMatch, fields, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Section)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Section>> GetSectionsByIdWithHttpInfoAsync(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SectionsApi->GetSectionsById");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Section>("/ed-fi/enrollment/Sections/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSectionsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Section&gt;</returns>
        public List<Section> GetSectionsByLocalEducationAgency(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string))
        {
            ApiResponse<List<Section>> localVarResponse = GetSectionsByLocalEducationAgencyWithHttpInfo(localEducationAgencyId, offset, limit, fields, q, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Section&gt;</returns>
        public ApiResponse<List<Section>> GetSectionsByLocalEducationAgencyWithHttpInfo(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string))
        {
            // verify the required parameter 'localEducationAgencyId' is set
            if (localEducationAgencyId == null)
                throw new ApiException(400, "Missing required parameter 'localEducationAgencyId' when calling SectionsApi->GetSectionsByLocalEducationAgency");

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("localEducationAgency_id", ClientUtils.ParameterToString(localEducationAgencyId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (sectionIdentifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sectionIdentifier", sectionIdentifier));
            }
            if (localCourseCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "localCourseCode", localCourseCode));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (schoolYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolYear", schoolYear));
            }
            if (sessionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sessionName", sessionName));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Section>>("/ed-fi/enrollment/localEducationAgencies/{localEducationAgency_id}/sections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSectionsByLocalEducationAgency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Section&gt;</returns>
        public async System.Threading.Tasks.Task<List<Section>> GetSectionsByLocalEducationAgencyAsync(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<List<Section>> localVarResponse = await GetSectionsByLocalEducationAgencyWithHttpInfoAsync(localEducationAgencyId, offset, limit, fields, q, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Section&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Section>>> GetSectionsByLocalEducationAgencyWithHttpInfoAsync(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'localEducationAgencyId' is set
            if (localEducationAgencyId == null)
                throw new ApiException(400, "Missing required parameter 'localEducationAgencyId' when calling SectionsApi->GetSectionsByLocalEducationAgency");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("localEducationAgency_id", ClientUtils.ParameterToString(localEducationAgencyId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (sectionIdentifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sectionIdentifier", sectionIdentifier));
            }
            if (localCourseCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "localCourseCode", localCourseCode));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (schoolYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolYear", schoolYear));
            }
            if (sessionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sessionName", sessionName));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Section>>("/ed-fi/enrollment/localEducationAgencies/{localEducationAgency_id}/sections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSectionsByLocalEducationAgency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId2"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Section&gt;</returns>
        public List<Section> GetSectionsBySchool(string schoolId2, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string))
        {
            ApiResponse<List<Section>> localVarResponse = GetSectionsBySchoolWithHttpInfo(schoolId2, offset, limit, fields, q, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId2"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Section&gt;</returns>
        public ApiResponse<List<Section>> GetSectionsBySchoolWithHttpInfo(string schoolId2, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string))
        {
            // verify the required parameter 'schoolId2' is set
            if (schoolId2 == null)
                throw new ApiException(400, "Missing required parameter 'schoolId2' when calling SectionsApi->GetSectionsBySchool");

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("school_id", ClientUtils.ParameterToString(schoolId2)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (sectionIdentifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sectionIdentifier", sectionIdentifier));
            }
            if (localCourseCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "localCourseCode", localCourseCode));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (schoolYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolYear", schoolYear));
            }
            if (sessionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sessionName", sessionName));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Section>>("/ed-fi/enrollment/schools/{school_id}/sections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSectionsBySchool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId2"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Section&gt;</returns>
        public async System.Threading.Tasks.Task<List<Section>> GetSectionsBySchoolAsync(string schoolId2, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<List<Section>> localVarResponse = await GetSectionsBySchoolWithHttpInfoAsync(schoolId2, offset, limit, fields, q, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schoolId2"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Section&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Section>>> GetSectionsBySchoolWithHttpInfoAsync(string schoolId2, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schoolId2' is set
            if (schoolId2 == null)
                throw new ApiException(400, "Missing required parameter 'schoolId2' when calling SectionsApi->GetSectionsBySchool");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("school_id", ClientUtils.ParameterToString(schoolId2)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (sectionIdentifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sectionIdentifier", sectionIdentifier));
            }
            if (localCourseCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "localCourseCode", localCourseCode));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (schoolYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolYear", schoolYear));
            }
            if (sessionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sessionName", sessionName));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Section>>("/ed-fi/enrollment/schools/{school_id}/sections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSectionsBySchool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Section&gt;</returns>
        public List<Section> GetSectionsByStaff(string staffId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string))
        {
            ApiResponse<List<Section>> localVarResponse = GetSectionsByStaffWithHttpInfo(staffId, offset, limit, fields, q, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Section&gt;</returns>
        public ApiResponse<List<Section>> GetSectionsByStaffWithHttpInfo(string staffId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string))
        {
            // verify the required parameter 'staffId' is set
            if (staffId == null)
                throw new ApiException(400, "Missing required parameter 'staffId' when calling SectionsApi->GetSectionsByStaff");

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("staff_id", ClientUtils.ParameterToString(staffId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (sectionIdentifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sectionIdentifier", sectionIdentifier));
            }
            if (localCourseCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "localCourseCode", localCourseCode));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (schoolYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolYear", schoolYear));
            }
            if (sessionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sessionName", sessionName));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Section>>("/ed-fi/enrollment/staffs/{staff_id}/sections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSectionsByStaff", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Section&gt;</returns>
        public async System.Threading.Tasks.Task<List<Section>> GetSectionsByStaffAsync(string staffId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<List<Section>> localVarResponse = await GetSectionsByStaffWithHttpInfoAsync(staffId, offset, limit, fields, q, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Section&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Section>>> GetSectionsByStaffWithHttpInfoAsync(string staffId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'staffId' is set
            if (staffId == null)
                throw new ApiException(400, "Missing required parameter 'staffId' when calling SectionsApi->GetSectionsByStaff");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("staff_id", ClientUtils.ParameterToString(staffId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (sectionIdentifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sectionIdentifier", sectionIdentifier));
            }
            if (localCourseCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "localCourseCode", localCourseCode));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (schoolYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolYear", schoolYear));
            }
            if (sessionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sessionName", sessionName));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Section>>("/ed-fi/enrollment/staffs/{staff_id}/sections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSectionsByStaff", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;Section&gt;</returns>
        public List<Section> GetSectionsByStudent(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string))
        {
            ApiResponse<List<Section>> localVarResponse = GetSectionsByStudentWithHttpInfo(studentId, offset, limit, fields, q, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;Section&gt;</returns>
        public ApiResponse<List<Section>> GetSectionsByStudentWithHttpInfo(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string))
        {
            // verify the required parameter 'studentId' is set
            if (studentId == null)
                throw new ApiException(400, "Missing required parameter 'studentId' when calling SectionsApi->GetSectionsByStudent");

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("student_id", ClientUtils.ParameterToString(studentId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (sectionIdentifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sectionIdentifier", sectionIdentifier));
            }
            if (localCourseCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "localCourseCode", localCourseCode));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (schoolYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolYear", schoolYear));
            }
            if (sessionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sessionName", sessionName));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Section>>("/ed-fi/enrollment/students/{student_id}/sections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSectionsByStudent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Section&gt;</returns>
        public async System.Threading.Tasks.Task<List<Section>> GetSectionsByStudentAsync(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<List<Section>> localVarResponse = await GetSectionsByStudentWithHttpInfoAsync(studentId, offset, limit, fields, q, sectionIdentifier, localCourseCode, schoolId, schoolYear, sessionName, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="sectionIdentifier">The local identifier assigned to a section. (optional)</param>
        /// <param name="localCourseCode">The local code assigned by the School that identifies the course offering provided for the instruction of students. (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="schoolYear">The identifier for the school year. (optional)</param>
        /// <param name="sessionName">The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Section&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Section>>> GetSectionsByStudentWithHttpInfoAsync(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), string sectionIdentifier = default(string), string localCourseCode = default(string), int? schoolId = default(int?), int? schoolYear = default(int?), string sessionName = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'studentId' is set
            if (studentId == null)
                throw new ApiException(400, "Missing required parameter 'studentId' when calling SectionsApi->GetSectionsByStudent");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("student_id", ClientUtils.ParameterToString(studentId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (sectionIdentifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sectionIdentifier", sectionIdentifier));
            }
            if (localCourseCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "localCourseCode", localCourseCode));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (schoolYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolYear", schoolYear));
            }
            if (sessionName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sessionName", sessionName));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Section>>("/ed-fi/enrollment/students/{student_id}/sections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSectionsByStudent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
