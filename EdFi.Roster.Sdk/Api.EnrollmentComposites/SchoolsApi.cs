/*
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using EdFi.Roster.Sdk.Client;
using EdFi.Roster.Sdk.Models.EnrollmentComposites;

namespace EdFi.Roster.Sdk.Api.EnrollmentComposites
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchoolsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;School&gt;</returns>
        List<School> GetSchools(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;School&gt;</returns>
        ApiResponse<List<School>> GetSchoolsWithHttpInfo(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string));
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>School</returns>
        School GetSchoolsById(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of School</returns>
        ApiResponse<School> GetSchoolsByIdWithHttpInfo(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;School&gt;</returns>
        List<School> GetSchoolsByLocalEducationAgency(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;School&gt;</returns>
        ApiResponse<List<School>> GetSchoolsByLocalEducationAgencyWithHttpInfo(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;School&gt;</returns>
        List<School> GetSchoolsBySection(string sectionId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;School&gt;</returns>
        ApiResponse<List<School>> GetSchoolsBySectionWithHttpInfo(string sectionId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;School&gt;</returns>
        List<School> GetSchoolsByStaff(string staffId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;School&gt;</returns>
        ApiResponse<List<School>> GetSchoolsByStaffWithHttpInfo(string staffId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;School&gt;</returns>
        List<School> GetSchoolsByStudent(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;School&gt;</returns>
        ApiResponse<List<School>> GetSchoolsByStudentWithHttpInfo(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchoolsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;School&gt;</returns>
        System.Threading.Tasks.Task<List<School>> GetSchoolsAsync(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;School&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<School>>> GetSchoolsWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of School</returns>
        System.Threading.Tasks.Task<School> GetSchoolsByIdAsync(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation retrieves a resource by the specified resource identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (School)</returns>
        System.Threading.Tasks.Task<ApiResponse<School>> GetSchoolsByIdWithHttpInfoAsync(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;School&gt;</returns>
        System.Threading.Tasks.Task<List<School>> GetSchoolsByLocalEducationAgencyAsync(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;School&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<School>>> GetSchoolsByLocalEducationAgencyWithHttpInfoAsync(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;School&gt;</returns>
        System.Threading.Tasks.Task<List<School>> GetSchoolsBySectionAsync(string sectionId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;School&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<School>>> GetSchoolsBySectionWithHttpInfoAsync(string sectionId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;School&gt;</returns>
        System.Threading.Tasks.Task<List<School>> GetSchoolsByStaffAsync(string staffId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;School&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<School>>> GetSchoolsByStaffWithHttpInfoAsync(string staffId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;School&gt;</returns>
        System.Threading.Tasks.Task<List<School>> GetSchoolsByStudentAsync(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern).
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;School&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<School>>> GetSchoolsByStudentWithHttpInfoAsync(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchoolsApi : ISchoolsApiSync, ISchoolsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchoolsApi : ISchoolsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchoolsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchoolsApi(String basePath)
        {
            this.Configuration = Sdk.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchoolsApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdk.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SchoolsApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;School&gt;</returns>
        public List<School> GetSchools(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string))
        {
            ApiResponse<List<School>> localVarResponse = GetSchoolsWithHttpInfo(offset, limit, fields, q, schoolId, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;School&gt;</returns>
        public ApiResponse<List<School>> GetSchoolsWithHttpInfo(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<School>>("/ed-fi/enrollment/Schools", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchools", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;School&gt;</returns>
        public async System.Threading.Tasks.Task<List<School>> GetSchoolsAsync(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<List<School>> localVarResponse = await GetSchoolsWithHttpInfoAsync(offset, limit, fields, q, schoolId, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;School&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<School>>> GetSchoolsWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<School>>("/ed-fi/enrollment/Schools", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchools", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>School</returns>
        public School GetSchoolsById(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string))
        {
            ApiResponse<School> localVarResponse = GetSchoolsByIdWithHttpInfo(id, ifNoneMatch, fields, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of School</returns>
        public ApiResponse<School> GetSchoolsByIdWithHttpInfo(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchoolsApi->GetSchoolsById");

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<School>("/ed-fi/enrollment/Schools/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchoolsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of School</returns>
        public async System.Threading.Tasks.Task<School> GetSchoolsByIdAsync(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<School> localVarResponse = await GetSchoolsByIdWithHttpInfoAsync(id, ifNoneMatch, fields, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific resource using the resource&#39;s identifier (using the \&quot;Get By Id\&quot; pattern). This GET operation retrieves a resource by the specified resource identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A resource identifier that uniquely identifies the resource.</param>
        /// <param name="ifNoneMatch">The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource. (optional)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (School)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<School>> GetSchoolsByIdWithHttpInfoAsync(string id, string ifNoneMatch = default(string), string fields = default(string), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchoolsApi->GetSchoolsById");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (ifNoneMatch != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<School>("/ed-fi/enrollment/Schools/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchoolsById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;School&gt;</returns>
        public List<School> GetSchoolsByLocalEducationAgency(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string))
        {
            ApiResponse<List<School>> localVarResponse = GetSchoolsByLocalEducationAgencyWithHttpInfo(localEducationAgencyId, offset, limit, fields, q, schoolId, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;School&gt;</returns>
        public ApiResponse<List<School>> GetSchoolsByLocalEducationAgencyWithHttpInfo(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string))
        {
            // verify the required parameter 'localEducationAgencyId' is set
            if (localEducationAgencyId == null)
                throw new ApiException(400, "Missing required parameter 'localEducationAgencyId' when calling SchoolsApi->GetSchoolsByLocalEducationAgency");

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("localEducationAgency_id", ClientUtils.ParameterToString(localEducationAgencyId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<School>>("/ed-fi/enrollment/localEducationAgencies/{localEducationAgency_id}/schools", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchoolsByLocalEducationAgency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;School&gt;</returns>
        public async System.Threading.Tasks.Task<List<School>> GetSchoolsByLocalEducationAgencyAsync(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<List<School>> localVarResponse = await GetSchoolsByLocalEducationAgencyWithHttpInfoAsync(localEducationAgencyId, offset, limit, fields, q, schoolId, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="localEducationAgencyId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;School&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<School>>> GetSchoolsByLocalEducationAgencyWithHttpInfoAsync(string localEducationAgencyId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'localEducationAgencyId' is set
            if (localEducationAgencyId == null)
                throw new ApiException(400, "Missing required parameter 'localEducationAgencyId' when calling SchoolsApi->GetSchoolsByLocalEducationAgency");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("localEducationAgency_id", ClientUtils.ParameterToString(localEducationAgencyId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<School>>("/ed-fi/enrollment/localEducationAgencies/{localEducationAgency_id}/schools", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchoolsByLocalEducationAgency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;School&gt;</returns>
        public List<School> GetSchoolsBySection(string sectionId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string))
        {
            ApiResponse<List<School>> localVarResponse = GetSchoolsBySectionWithHttpInfo(sectionId, offset, limit, fields, q, schoolId, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;School&gt;</returns>
        public ApiResponse<List<School>> GetSchoolsBySectionWithHttpInfo(string sectionId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string))
        {
            // verify the required parameter 'sectionId' is set
            if (sectionId == null)
                throw new ApiException(400, "Missing required parameter 'sectionId' when calling SchoolsApi->GetSchoolsBySection");

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("section_id", ClientUtils.ParameterToString(sectionId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<School>>("/ed-fi/enrollment/sections/{section_id}/schools", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchoolsBySection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;School&gt;</returns>
        public async System.Threading.Tasks.Task<List<School>> GetSchoolsBySectionAsync(string sectionId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<List<School>> localVarResponse = await GetSchoolsBySectionWithHttpInfoAsync(sectionId, offset, limit, fields, q, schoolId, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sectionId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;School&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<School>>> GetSchoolsBySectionWithHttpInfoAsync(string sectionId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sectionId' is set
            if (sectionId == null)
                throw new ApiException(400, "Missing required parameter 'sectionId' when calling SchoolsApi->GetSchoolsBySection");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("section_id", ClientUtils.ParameterToString(sectionId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<School>>("/ed-fi/enrollment/sections/{section_id}/schools", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchoolsBySection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;School&gt;</returns>
        public List<School> GetSchoolsByStaff(string staffId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string))
        {
            ApiResponse<List<School>> localVarResponse = GetSchoolsByStaffWithHttpInfo(staffId, offset, limit, fields, q, schoolId, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;School&gt;</returns>
        public ApiResponse<List<School>> GetSchoolsByStaffWithHttpInfo(string staffId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string))
        {
            // verify the required parameter 'staffId' is set
            if (staffId == null)
                throw new ApiException(400, "Missing required parameter 'staffId' when calling SchoolsApi->GetSchoolsByStaff");

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("staff_id", ClientUtils.ParameterToString(staffId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<School>>("/ed-fi/enrollment/staffs/{staff_id}/schools", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchoolsByStaff", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;School&gt;</returns>
        public async System.Threading.Tasks.Task<List<School>> GetSchoolsByStaffAsync(string staffId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<List<School>> localVarResponse = await GetSchoolsByStaffWithHttpInfoAsync(staffId, offset, limit, fields, q, schoolId, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;School&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<School>>> GetSchoolsByStaffWithHttpInfoAsync(string staffId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'staffId' is set
            if (staffId == null)
                throw new ApiException(400, "Missing required parameter 'staffId' when calling SchoolsApi->GetSchoolsByStaff");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("staff_id", ClientUtils.ParameterToString(staffId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<School>>("/ed-fi/enrollment/staffs/{staff_id}/schools", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchoolsByStaff", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>List&lt;School&gt;</returns>
        public List<School> GetSchoolsByStudent(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string))
        {
            ApiResponse<List<School>> localVarResponse = GetSchoolsByStudentWithHttpInfo(studentId, offset, limit, fields, q, schoolId, snapshotIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <returns>ApiResponse of List&lt;School&gt;</returns>
        public ApiResponse<List<School>> GetSchoolsByStudentWithHttpInfo(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string))
        {
            // verify the required parameter 'studentId' is set
            if (studentId == null)
                throw new ApiException(400, "Missing required parameter 'studentId' when calling SchoolsApi->GetSchoolsByStudent");

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("student_id", ClientUtils.ParameterToString(studentId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<School>>("/ed-fi/enrollment/students/{student_id}/schools", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchoolsByStudent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;School&gt;</returns>
        public async System.Threading.Tasks.Task<List<School>> GetSchoolsByStudentAsync(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<List<School>> localVarResponse = await GetSchoolsByStudentWithHttpInfoAsync(studentId, offset, limit, fields, q, schoolId, snapshotIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific resources using the resource&#39;s property values (using the \&quot;Get\&quot; pattern). This GET operation provides access to resources using the \&quot;Get\&quot; search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId"></param>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional, default to 0)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional, default to 25)</param>
        /// <param name="fields">Specifies a subset of properties that should be returned for each entity (e.g. \&quot;property1,collection1(collProp1,collProp2)\&quot;). (optional)</param>
        /// <param name="q">Specifies a query filter expression for the request. Currently only supports range-based queries on dates and numbers (e.g. \&quot;schoolId:[255901000...255901002]\&quot; and \&quot;BeginDate:[2016-03-07...2016-03-10]\&quot;). (optional)</param>
        /// <param name="schoolId">The identifier assigned to a school. (optional)</param>
        /// <param name="snapshotIdentifier">Indicates the Snapshot-Identifier that should be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;School&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<School>>> GetSchoolsByStudentWithHttpInfoAsync(string studentId, int? offset = default(int?), int? limit = default(int?), string fields = default(string), string q = default(string), int? schoolId = default(int?), string snapshotIdentifier = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'studentId' is set
            if (studentId == null)
                throw new ApiException(400, "Missing required parameter 'studentId' when calling SchoolsApi->GetSchoolsByStudent");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("student_id", ClientUtils.ParameterToString(studentId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (schoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "schoolId", schoolId));
            }
            if (snapshotIdentifier != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Snapshot-Identifier", ClientUtils.ParameterToString(snapshotIdentifier)); // header parameter
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<School>>("/ed-fi/enrollment/students/{student_id}/schools", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchoolsByStudent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
